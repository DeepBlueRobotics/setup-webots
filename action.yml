name: 'Setup Webots'
description: 'Installs Webots on the runner'
inputs:
  webotsVersion:
    description: "Version of Webots to install."
    required: true
outputs:
  bashCmd:
    description: "Start of a command line in bash which will run webots on all runners with options suitable for headless execution. This is also put in the RUN_WEBOTS environment variable."
    value: ${{ steps.setup.outputs.bashCmd }}
  cachePath:
    description: "Path to cache."
    value: ${{ steps.setup.outputs.cachePath }}
  home:
    description: "Path of the Webots installation, suitable for putting in WEBOTS_HOME environment variable"
    value: ${{ steps.setup.outputs.home }}
  binDir:
    description: "Directory containing the Webots executable, suitable for adding to the PATH environment variable"
    value: ${{ steps.setup.outputs.binDir }}
  bin:
    description: "Full path to the Webots executable, suitable for running webots directly (albeit probably not succesfully, that's what bashCmd or $RUN_WEBOTS is for)"
    value: ${{ steps.setup.outputs.bin }}

runs:
  using: 'composite'
  steps:
    - name: 'Setup Webots Environment'
      id: setup
      run: |
        webotsOptions="--no-rendering --stdout --stderr --minimize --batch"
        if [ '${{ runner.os }}' = 'Linux' ]; then
          webotsCachePath="$HOME/cache/webots"
          webotsHome="$HOME/webots"
          webotsBinDir="${webotsHome}"
          webotsBin="${webotsBinDir}/webots"
          webotsBashCmd="xvfb-run -a ${webotsBin} ${webotsOptions}"
          pkgName=webots-${{ inputs.webotsVersion }}-x86-64.tar.bz2
        elif [ '${{ runner.os }}' = 'Windows' ]; then
          webotsCachePath="${USERPROFILE}/cache/webots"
          webotsHome="${LOCALAPPDATA}/Programs/Webots"
          webotsBinDir="${webotsHome}/msys64/mingw64/bin"
          webotsBin="${webotsBinDir}/webots"
          webotsBashCmd="${webotsBin} ${webotsOptions}"
          echo "MESA_GL_VERSION_OVERRIDE=3.3" >> $GITHUB_ENV
          pkgName=webots-${{ inputs.webotsVersion }}_setup.exe
        elif [ '${{ runner.os }}' = 'macOS' ]; then
          webotsCachePath="$HOME/cache/webots"
          webotsHome="$HOME/Applications/Webots.app/Contents/MacOS"
          webotsBinDir="${webotsHome}"
          webotsBin="${webotsBinDir}/webots"
          webotsBashCmd="${webotsBin} ${webotsOptions}"
          pkgName=webots-${{ inputs.webotsVersion }}.dmg
        else
          echo "Unrecognized runner OS"
          exit -1
        fi
        echo "bashCmd=$webotsBashCmd" >> $GITHUB_OUTPUT
        echo "cachePath=${webotsCachePath}" >> $GITHUB_OUTPUT
        echo "home=${webotsHome}" >> $GITHUB_OUTPUT
        echo "binDir=${webotsBinDir}" >> $GITHUB_OUTPUT
        echo "bin=${webotsBin}" >> $GITHUB_OUTPUT
        echo "pkgName=$pkgName" >> $GITHUB_OUTPUT
        echo "RUN_WEBOTS=$webotsBashCmd" >> $GITHUB_ENV
        echo "LIBGL_ALWAYS_SOFTWARE=true" >> $GITHUB_ENV
        echo "WEBOTS_DISABLE_SAVE_SCREEN_PERSPECTIVE_ON_CLOSE=true" >> $GITHUB_ENV
      shell: bash
    - name: 'Cache Webots' # This will try to load Webots from the cache and save it to the cache after it's installed
      uses: actions/cache@v3
      with:
        path: ${{ steps.setup.outputs.cachePath }}
        key: ${{ runner.os }}-webots-${{ inputs.webotsVersion }}
    - name: 'Download Webots'
      if: steps.cache.outputs.cache-hit != 'true'
      run: |
        curl -L -o "${{ steps.setup.outputs.cachePath }}/${{ steps.setup.outputs.pkgName }}" --create-dirs "https://github.com/cyberbotics/webots/releases/download/${{ inputs.webotsVersion }}/${{ steps.setup.outputs.pkgName }}"
        if [ '${{ runner.os }}' = 'Windows' ]; then
          curl -L -o "${{ steps.setup.outputs.cachePath }}/Mesa.7z" --create-dirs https://downloads.fdossena.com/geth.php?r=mesa64-latest
        fi
      shell: bash
    - name: 'Install Webots'
      run: |
        cachedWebotsBin="${{ steps.setup.outputs.cachePath }}/${{ steps.setup.outputs.pkgName }}"
        if [ '${{ runner.os }}' = 'Linux' ]; then
          sudo apt update
          sudo apt-get install lsb-release g++ make libavcodec-extra libglu1-mesa libxkbcommon-x11-dev execstack libusb-dev libxcb-keysyms1 libxcb-image0 libxcb-icccm4 libxcb-randr0 libxcb-render-util0 libxcb-xinerama0 libxcomposite-dev libxtst6 libnss3
          mkdir -p "${{ steps.setup.outputs.home }}"
          tar xjf $cachedWebotsBin -C "${{ steps.setup.outputs.home }}"
          chmod +x "${{ steps.setup.outputs.bin }}"
        elif [ '${{ runner.os }}' = 'Windows' ]; then
          "$cachedWebotsBin" //VERYSILENT //SP- //SUPPRESSMSGBOXES //CURRENTUSER
          7z e -o${LOCALAPPDATA}/Programs/Webots/msys64/mingw64/bin "${{ steps.setup.outputs.cachePath }}/Mesa.7z"
        elif [ '${{ runner.os }}' = 'macOS' ]; then
          mkdir ~/Mount
          mkdir -p ~/Applications
          hdiutil attach $cachedWebotsBin -noverify -mountpoint ~/Mount
          cp -R ~/Mount/Webots.app ~/Applications
          hdiutil detach ~/Mount
          rmdir ~/Mount
        else
          echo "Unrecognized runner OS"
          exit -1
        fi
      shell: bash
